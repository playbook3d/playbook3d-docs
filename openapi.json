{
  "openapi": "3.1.0",
  "info": {
    "title": "Playbook API Documentation",
    "description": "This is the documentation for the Playbook API. You can use this API to use our service programmatically, this is done by using your API key. <br/> You can view your API key using the 'User' tab on https://beta.playbook3d.com/.",
    "version": "1.0"
  },
  "paths": {
    "/template": {
      "post": {
        "tags": ["text-to-speech"],
        "summary": "Text To Speech",
        "description": "Converts text into speech using a voice of your choice and returns audio.",
        "operationId": "Text_to_speech_v1_text_to_speech__voice_id__post",
        "parameters": [
          {
            "description": "Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Voice Id",
              "description": "Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices."
            },
            "example": "21m00Tcm4TlvDq8ikWAM",
            "name": "voice_id",
            "in": "path"
          },
          {
            "description": "When enable_logging is set to false full privacy mode will be used for the request. This will mean history features are unavailable for this request, including request stitching. Full privacy mode may only be used by enterprise customers.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Enable request logging.",
              "description": "When enable_logging is set to false full privacy mode will be used for the request. This will mean history features are unavailable for this request, including request stitching. Full privacy mode may only be used by enterprise customers.",
              "default": true
            },
            "name": "enable_logging",
            "in": "query"
          },
          {
            "description": "You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values:\n0 - default mode (no latency optimizations)\n1 - normal latency optimizations (about 50% of possible latency improvement of option 3)\n2 - strong latency optimizations (about 75% of possible latency improvement of option 3)\n3 - max latency optimizations\n4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).\n\nDefaults to None.\n",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "integer",
              "title": "DEPRECATED. How much we should optimize streaming request latency (time to first audio byte).",
              "description": "You can turn on latency optimizations at some cost of quality. The best possible final latency varies by model. Possible values:\n0 - default mode (no latency optimizations)\n1 - normal latency optimizations (about 50% of possible latency improvement of option 3)\n2 - strong latency optimizations (about 75% of possible latency improvement of option 3)\n3 - max latency optimizations\n4 - max latency optimizations, but also with text normalizer turned off for even more latency savings (best latency, but can mispronounce eg numbers and dates).\n\nDefaults to None.\n"
            },
            "name": "optimize_streaming_latency",
            "in": "query"
          },
          {
            "description": "Output format of the generated audio. Must be one of:\nmp3_22050_32 - output format, mp3 with 22.05kHz sample rate at 32kbps.\nmp3_44100_32 - output format, mp3 with 44.1kHz sample rate at 32kbps.\nmp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps.\nmp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps.\nmp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps.\nmp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above.\npcm_16000 - PCM format (S16LE) with 16kHz sample rate.\npcm_22050 - PCM format (S16LE) with 22.05kHz sample rate.\npcm_24000 - PCM format (S16LE) with 24kHz sample rate.\npcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Pro tier or above.\nulaw_8000 - μ-law format (sometimes written mu-law, often approximated as u-law) with 8kHz sample rate. Note that this format is commonly used for Twilio audio inputs.\n",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Output format of the generated audio.",
              "description": "Output format of the generated audio. Must be one of:\nmp3_22050_32 - output format, mp3 with 22.05kHz sample rate at 32kbps.\nmp3_44100_32 - output format, mp3 with 44.1kHz sample rate at 32kbps.\nmp3_44100_64 - output format, mp3 with 44.1kHz sample rate at 64kbps.\nmp3_44100_96 - output format, mp3 with 44.1kHz sample rate at 96kbps.\nmp3_44100_128 - default output format, mp3 with 44.1kHz sample rate at 128kbps.\nmp3_44100_192 - output format, mp3 with 44.1kHz sample rate at 192kbps. Requires you to be subscribed to Creator tier or above.\npcm_16000 - PCM format (S16LE) with 16kHz sample rate.\npcm_22050 - PCM format (S16LE) with 22.05kHz sample rate.\npcm_24000 - PCM format (S16LE) with 24kHz sample rate.\npcm_44100 - PCM format (S16LE) with 44.1kHz sample rate. Requires you to be subscribed to Pro tier or above.\nulaw_8000 - μ-law format (sometimes written mu-law, often approximated as u-law) with 8kHz sample rate. Note that this format is commonly used for Twilio audio inputs.\n",
              "default": "mp3_44100_128"
            },
            "name": "output_format",
            "in": "query"
          },
          {
            "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Xi-Api-Key",
              "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website."
            },
            "name": "xi-api-key",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_Text_to_speech_v1_text_to_speech__voice_id__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "audio/mpeg": {}
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from elevenlabs import ElevenLabs\n\nclient = ElevenLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_speech.convert(\n    voice_id=\"21m00Tcm4TlvDq8ikWAM\",\n    model_id=\"eleven_multilingual_v2\",\n    text=\"Hello! 你好! Hola! नमस्ते! Bonjour! こんにちは! مرحبا! 안녕하세요! Ciao! Cześć! Привіт! வணக்கம்!\",\n)\n"
          },
          {
            "lang": "JavaScript",
            "source": "import { ElevenLabsClient } from \"elevenlabs\";\n\nconst client = new ElevenLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.textToSpeech.convert(\"21m00Tcm4TlvDq8ikWAM\", {\n    model_id: \"eleven_multilingual_v2\",\n    text: \"Hello! 你好! Hola! नमस्ते! Bonjour! こんにちは! مرحبا! 안녕하세요! Ciao! Cześć! Привіт! வணக்கம்!\"\n});\n"
          },
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM \\\n  --header 'xi-api-key: YOUR_API_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"text\": \"Hello! 你好! Hola! नमस्ते! Bonjour! こんにちは! مرحبا! 안녕하세요! Ciao! Cześć! Привіт! வணக்கம்!\",\n    \"model_id\": \"eleven_multilingual_v2\"\n  }'"
          }
        ]
      }
    },
    "/upload-image":{
      "post":{
        "tags": ["upload-image"],
        "summary": "Upload image",
        "description": "Uploads image to Playbook3d's servers.",
        "operationId": "upload_image",
        "parameters": [
          {
            "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "X-Api-Key",
              "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website."
            },
            "name": "x-api-key",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upload_image_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties":{
                    "message":{
                      "type": "string"
                    }
                  },
                  "example":{
                    "message": "Image Uploaded succesfully"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from playbookNetworkClient import PlaybookClient\n\n def setup(self):\n self.playbookClient = PlaybookClient()\n self.playbookClient.set_api_key({your api key})\n\n def upload_image(self, image: Union[str, bytes]):\n  result = self.playbookClient.upload_image_to_playbook(image)"
          },
          {
            "lang": "JavaScript",
            "source": ""
          },
          {
            "lang": "C#",
            "source": "RunWorkflowProperties data =\n\tnew()\n\t{\n\t\tid = {workflow_id},\n\t\torigin = \"2\",\n\t\tinputs = new { },\n\t};"
          }
        ]
      }
    },
    "/upload-video":{
      "post":{
        "tags": ["upload-video"],
        "summary": "Upload video",
        "description": "Uploads video to Playbook3d's servers.",
        "operationId": "video",
        "parameters": [
          {
            "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "X-Api-Key",
              "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website."
            },
            "name": "x-api-key",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upload_image_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties":{
                    "message":{
                      "type": "string"
                    }
                  },
                  "example":{
                    "message": "Image Uploaded succesfully"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from playbookNetworkClient import PlaybookClient\n\n def setup(self):\n self.playbookClient = PlaybookClient()\n self.playbookClient.set_api_key({your api key})\n\n def upload_video(self, video: Union[str, bytes]):\n  result = self.playbookClient.upload_video_to_playbook(video)"
          },
          {
            "lang": "JavaScript",
            "source": ""
          },
          {
            "lang": "C#",
            "source": "RunWorkflowProperties data =\n\tnew()\n\t{\n\t\tid = {workflow_id},\n\t\torigin = \"2\",\n\t\tinputs = new { },\n\t};"
          }
        ]
      }
    },
    "/run-workflow/{team_id}/{run_id}": {
      "post": {
        "tags": ["run-workflow"],
        "summary": "Run Workflow",
        "description": "Runs specified workflow.",
        "operationId": "run_workflow",
        "parameters": [
          {
            "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "X-Api-Key",
              "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website."
            },
            "name": "x-api-key",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/run_workflow_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties":{
                    "run_id":{
                      "type": "string"
                    },
                    "status":{
                      "type": "string"
                    },
                    "message":{
                      "type": "string"
                    }
                  },
                  "example":{
                    "run_id": "uuid",
                    "status": "queued",
                    "message": "Workflow submitted to ComfyUI Server"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from playbookNetworkClient import PlaybookClient\n\n def setup(self):\n self.playbookClient = PlaybookClient()\n self.playbookClient.set_api_key({your api key})\n\n def run_workflow(self, workflow: PlaybookWorkflow):\n  result = self.playbookClient.run_workflow({workflow})"
          },
          {
            "lang": "JavaScript",
            "source": ""
          },
          {
            "lang": "C#",
            "source": "RunWorkflowProperties data =\n\tnew()\n\t{\n\t\tid = {workflow_id},\n\t\torigin = \"2\",\n\t\tinputs = new { },\n\t};"
          },
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\"id\": \"workflow_id\", \"origin\": \"2\", \"inputs\": {}}' \\\n  '$BASE_URL/run-workflow/{team_id}'"
          }
        ]
      }
    },
    "/get_run_id": {
      "get": {
        "tags": ["run-workflow"],
        "summary": "Retrieve a new Run ID",
        "description": "Returns a fresh run_id (UUID) that you can use to identify or track a workflow execution.",
        "operationId": "get_run_id",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. Required by most endpoints for programmatic access. Viewable in 'Profile' tab on the website.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Successfully retrieved a run ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "run_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Newly generated run ID (UUID)."
                    }
                  },
                  "example": {
                    "run_id": "3fa85f64-5717-4752-b3fc-2c963f66aga6"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Check your API key or token."
          },
          "402": {
            "description": "Payment required. Subscription or plan issue."
          },
          "403": {
            "description": "Forbidden. You lack permission to perform this action."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server."
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Authorization: Bearer <YOUR_JWT>' \\\n  -H 'Accept: application/json' \\\n  'https://api.playbook3d.com/get_run_id'"
          }
        ]
      }
    },
    "/{run_id}/result": {
      "get": {
        "tags": ["runs"],
        "summary": "Get Run Result by Run ID",
        "description": "Returns a signed URL (or other info) for the output associated with a given run ID.",
        "operationId": "get_run_result",
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "description": "The UUID of the run whose result you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).", 
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. Returns JSON with a signed S3 URL, e.g. `{ \"result\": \"https://...\" }`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Signed URL or other location of run's output"
                    }
                  },
                  "example": {
                    "result": "https://signed-url.s3.amazonaws.com/..."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Usually means run_id is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Usually means run_id is invalid."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Usually means run_id is invalid."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Bearer token or API key is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user does not have permission to view this run result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. The user does not have permission to view this run result."
                    }
                  },
                  "example": {
                    "description": "Forbidden. The user does not have permission to view this run result."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The run with the given ID does not exist or has no result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The run with the given ID does not exist or has no result."
                    }
                  },
                  "example": {
                    "description": "Not Found. The run with the given ID does not exist or has no result."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'Accept: application/json' \\\n  '$BASE_URL/workflows/$workflow_id'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.get('https://accounts.playbook3d.com/runs/<RUN_ID>/result', headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch('https://accounts.playbook3d.com/runs/<RUN_ID>/result', {\n  method: 'GET',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n}).then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.GetAsync(\"https://accounts.playbook3d.com/runs/<RUN_ID>/result\");\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      }
    },
    "/workflows/{workflow_id}": {
      "get": {
        "tags": ["workflows"],
        "summary": "Get Workflow by ID",
        "description": "Retrieves a single workflow record by ID. Requires both JWT and x-api-key.",
        "operationId": "get_workflow_by_id",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "description": "The UUID of the workflow you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflow": {
                      "type": "object",
                      "description": "A JSON object representing the found workflow."
                    }
                  },
                  "example": {
                    "workflow": {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "name": "Example Workflow",
                      "team_id": "41480ee5-14ff-4f9e-89bf-91b0a8e50e77",
                      "canvas_type": 0,
                      "created_at": "2025-01-02T10:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Check your JWT or API key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. Check your JWT or API key."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. Check your JWT or API key."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this workflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. You do not have permission to access this workflow."
                    }
                  },
                  "example": {
                    "description": "Forbidden. You do not have permission to access this workflow."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The requested workflow could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The requested workflow could not be found."
                    }
                  },
                  "example": {
                    "description": "Not Found. The requested workflow could not be found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'Accept: application/json' \\\n  '$BASE_URL/workflows/$workflow_id'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.get(f\"https://example.com/workflows/{{workflow_id}}\", headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch(`https://example.com/workflows/${workflow_id}`, {\n  method: 'GET',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n}).then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.GetAsync($\"https://example.com/workflows/{workflow_id}\");\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      },
      "delete": {
        "tags": ["workflows"],
        "summary": "Delete Workflow by ID",
        "description": "Deletes the specified workflow by ID (could be a soft-delete or permanent, depending on server logic). Requires both JWT and x-api-key.",
        "operationId": "delete_workflow",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "description": "The UUID of the workflow you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Deletion. The server returns a JSON body about the removed workflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflow": {
                      "type": "object",
                      "description": "The deleted workflow object or confirmation details."
                    }
                  },
                  "example": {
                    "workflow": {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "name": "Deleted Workflow",
                      "status": "removed",
                      "deleted_at": "2024-12-31T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content. The server indicates success but returns no body."
          },
          "400": {
            "description": "Bad Request. Possibly invalid workflow_id format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid workflow_id format."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid workflow_id format."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Bearer token or API key is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user does not have permission to delete this workflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. The user does not have permission to delete this workflow."
                    }
                  },
                  "example": {
                    "description": "Forbidden. The user does not have permission to delete this workflow."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The workflow with the given ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The workflow with the given ID was not found."
                    }
                  },
                  "example": {
                    "description": "Not Found. The workflow with the given ID was not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'Accept: application/json' \\\n  '$BASE_URL/workflows/$workflow_id'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.delete(f\"https://example.com/workflows/{workflow_id}\", headers=headers)\nprint(resp.status_code, resp.text)"
          },
          {
            "lang": "JavaScript",
            "source": "fetch(`https://example.com/workflows/${workflow_id}`, {\n  method: 'DELETE',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n}).then(async res => {\n  console.log(res.status);\n  console.log(await res.text());\n}).catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.DeleteAsync($\"https://example.com/workflows/{workflow_id}\");\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      },
      "patch": {
        "tags": ["workflows"],
        "summary": "Update an Existing Workflow",
        "description": "Updates fields of a workflow specified by workflow_id. Requires JWT and x-api-key.",
        "operationId": "update_workflow",
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "description": "The UUID of the workflow to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "JSON fields to update on the specified workflow.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New workflow name."
                  },
                  "team_id": {
                    "type": "string",
                    "description": "UUID of the team to which the workflow will be reassigned."
                  },
                  "owner_id": {
                    "type": "string",
                    "description": "UUID of the new owner of this workflow (if your code allows updating ownership)."
                  },
                  "is_external": {
                    "type": "boolean",
                    "description": "Whether this workflow is marked as external."
                  },
                  "canvas_type": {
                    "type": "integer",
                    "description": "Canvas type (0 for basic, etc.)."
                  }
                },
                "example": {
                  "name": "Updated Workflow #4",
                  "team_id": "41480ee5-14ff-4f9e-89bf-91b0a8e50e77",
                  "owner_id": "ab7dafe2-4f19-4570-bad0-a88e70ad2c11",
                  "is_external": false,
                  "canvas_type": 0
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated workflow. Returns the updated workflow JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The workflow’s UUID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Updated workflow name."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "Current team UUID after update."
                    },
                    "owner_id": {
                      "type": "string",
                      "description": "Current owner UUID after update (if changed)."
                    }
                  },
                  "example": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "Updated Workflow #4",
                    "team_id": "41480ee5-14ff-4f9e-89bf-91b0a8e50e77",
                    "owner_id": "ab7dafe2-4f19-4570-bad0-a88e70ad2c11",
                    "canvas_type": 0,
                    "is_external": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possibly invalid JSON or missing fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid JSON or missing fields."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid JSON or missing fields."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Check your JWT or API key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user does not have permission to update this workflow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. The user does not have permission."
                    }
                  },
                  "example": {
                    "description": "Forbidden. The user does not have permission."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The workflow ID does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The workflow ID does not exist."
                    }
                  },
                  "example": {
                    "description": "Not Found. The workflow ID does not exist."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PATCH \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'x-api-key: $API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\"name\": \"Updated Workflow #4\", \"team_id\": \"41480ee5-14ff-4f9e-89bf-91b0a8e50e77\", \"owner_id\": \"ab7dafe2-4f19-4570-bad0-a88e70ad2c11\", \"is_external\": false, \"canvas_type\": 0}' \\\n  '$BASE_URL/workflows/$workflow_id'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n  'x-api-key': '<YOUR_API_KEY>',\n  'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\ndata = {\n  'name': 'Updated Workflow #4',\n  'team_id': '41480ee5-14ff-4f9e-89bf-91b0a8e50e77',\n  'owner_id': 'ab7dafe2-4f19-4570-bad0-a88e70ad2c11',\n  'is_external': False,\n  'canvas_type': 0\n}\n\nresp = requests.patch(f\"https://accounts.playbook3d.com/workflows/{{workflow_id}}\", json=data, headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch(`https://accounts.playbook3d.com/workflows/${workflow_id}`, {\n  method: 'PATCH',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Updated Workflow #4',\n    team_id: '41480ee5-14ff-4f9e-89bf-91b0a8e50e77',\n    owner_id: 'ab7dafe2-4f19-4570-bad0-a88e70ad2c11',\n    is_external: false,\n    canvas_type: 0\n  })\n})\n  .then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar updateFields = new {\n    name = \"Updated Workflow #4\",\n    team_id = \"41480ee5-14ff-4f9e-89bf-91b0a8e50e77\",\n    owner_id = \"ab7dafe2-4f19-4570-bad0-a88e70ad2c11\",\n    is_external = false,\n    canvas_type = 0\n};\n\nvar content = new StringContent(\n    JsonConvert.SerializeObject(updateFields), Encoding.UTF8, \"application/json\");\nvar response = await client.PatchAsync($\"https://accounts.playbook3d.com/workflows/{workflow_id}\", content);\nstring respContent = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(respContent);"
          }
        ]
      }
    },
    "/cancel/{team_id}/{run_id}": {
      "post": {
        "tags": ["workflows"],
        "summary": "Cancel a Running Workflow",
        "description": "Cancels an ongoing run for a given team and run ID. Requires JWT bearer token and x-api-key.",
        "operationId": "cancel_run",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "description": "The UUID of the team that owns this run.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The UUID of the run to cancel.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access our API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The run was canceled successfully or is already in a final state.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A success message, or final run state."
                    }
                  },
                  "example": {
                    "message": "Run successfully canceled."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possibly invalid team_id/run_id format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid team_id/run_id format."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid team_id/run_id format."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Bearer token or API key is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "402": {
            "description": "Payment Required. Subscription not active or no credits available.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Payment Required. Subscription not active or no credits available."
                    }
                  },
                  "example": {
                    "description": "Payment Required. Subscription not active or no credits available."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. You do not have permission to cancel this run.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. You do not have permission to cancel this run."
                    }
                  },
                  "example": {
                    "description": "Forbidden. You do not have permission to cancel this run."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The run or team was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The run or team was not found."
                    }
                  },
                  "example": {
                    "description": "Not Found. The run or team was not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H 'Authorization: Bearer $JWT_TOKEN' \\\n  -H 'Accept: application/json' \\\n  '$BASE_URL/cancel/{TEAM_ID}/{RUN_ID}'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.post(\n    f\"https://example.com/cancel/{{TEAM_ID}}/{{RUN_ID}}\",\n    headers=headers\n)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch(`https://example.com/cancel/${TEAM_ID}/${RUN_ID}`, {\n  method: 'POST',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n})\n.then(res => res.json())\n.then(data => console.log(data))\n.catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.PostAsync(\"https://example.com/cancel/{TEAM_ID}/{RUN_ID}\", null);\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      }
    },
    "/workflows": {
      "get": {
        "tags": ["workflows"],
        "summary": "List All Workflows",
        "description": "Retrieves all workflows associated with the current user or their teams.",
        "operationId": "get_workflows",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. Returns a JSON array of workflows.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "description": "The workflow’s unique ID (UUID)." },
                      "name": { "type": "string", "description": "Workflow name." }

                    }
                  },
                  "example": [
                    {
                      "id": "c5247e83-95ad-421f-b38c-f3c645a91de7",
                      "name": "Customer Onboarding Flow",
                      "owner_id": "7631a8e2-509f-4d17-b5a2-e84bca57f1d6",
                      "team_id": "25974c31-28dd-45f0-93fb-82c7a409e358",
                      "editing_user_id": "7631a8e2-509f-4d17-b5a2-e84bca57f1d6",
                      "is_external": false,
                      "canvas_type": 0,
                      "public": true,
                      "created_at": "2025-01-15T14:37:22.451Z",
                      "updated_at": "2025-01-15T16:23:45.892Z"
                    },
                    {
                      "id": "87d1b935-a6e1-48f3-b407-f29a5d3c6e08",
                      "name": "Document Processing Workflow",
                      "owner_id": "7631a8e2-509f-4d17-b5a2-e84bca57f1d6",
                      "team_id": "25974c31-28dd-45f0-93fb-82c7a409e358",
                      "editing_user_id": "7631a8e2-509f-4d17-b5a2-e84bca57f1d6",
                      "is_external": false,
                      "canvas_type": 0,
                      "public": false,
                      "created_at": "2025-01-12T10:21:45.123Z",
                      "updated_at": "2025-01-13T09:15:32.447Z"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possibly invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid parameters."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid parameters."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Bearer token or API key is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user does not have permission to view these workflows.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. The user does not have permission to view these workflows."
                    }
                  },
                  "example": {
                    "description": "Forbidden. The user does not have permission to view these workflows."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The /workflows endpoint could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The /workflows endpoint could not be found."
                    }
                  },
                  "example": {
                    "description": "Not Found. The /workflows endpoint could not be found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Authorization: Bearer $JWT_TOKEN' \\\n  -H 'x-api-key: $X-API-KEY' \\\n  -H 'Accept: application/json' \\\n  '$BASE_URL/workflows/$WORKFLOW_ID'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.get('https://accounts.playbook3d.com/workflows', headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch('https://accounts.playbook3d.com/workflows', {\n  method: 'GET',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n})\n  .then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.GetAsync(\"https://accounts.playbook3d.com/workflows\");\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      },
      "post": {
        "tags": ["workflows"],
        "summary": "Create a New Workflow",
        "description": "Creates a new workflow associated with the specified team (and owned by the user sending the request).",
        "operationId": "create_workflow",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "JSON data defining the workflow to be created.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the workflow."
                  },
                  "team_id": {
                    "type": "string",
                    "description": "UUID of the team with which this workflow is associated."
                  },
                  "is_external": {
                    "type": "boolean",
                    "description": "Indicates if the workflow is an external one."
                  },
                  "canvas_type": {
                    "type": "integer",
                    "description": "Canvas type (0 for basic, 1 for advanced, etc.)."
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Whether the workflow is public or private."
                  }
                },
                "example": {
                  "name": "Customer Journey Analysis",
                  "team_id": "25974c31-28dd-45f0-93fb-82c7a409e358",
                  "is_external": false,
                  "canvas_type": 0,
                  "public": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created workflow (some code returns 200). Returns the new workflow in JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The newly created workflow's UUID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the newly created workflow."
                    },
                    "owner_id": {
                      "type": "string",
                      "description": "UUID of the workflow owner."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "UUID of the associated team."
                    },
                    "editing_user_id": {
                      "type": "string",
                      "description": "UUID of the user currently editing the workflow."
                    },
                    "is_external": {
                      "type": "boolean",
                      "description": "Whether the workflow is external."
                    },
                    "canvas_type": {
                      "type": "integer",
                      "description": "Type of canvas used for the workflow."
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Whether the workflow is public."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was created."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was last updated."
                    }
                  },
                  "example": {
                    "id": "c5247e83-95ad-421f-b38c-f3c645a91de7",
                    "name": "Customer Journey Analysis",
                    "owner_id": "7631a8e2-509f-4d17-b5a2-e84bca57f1d6",
                    "team_id": "25974c31-28dd-45f0-93fb-82c7a409e358",
                    "editing_user_id": null,
                    "last_edited": null,
                    "workflow_url": null,
                    "workflow_api_url": null,
                    "is_external": false,
                    "s3_file_id": null,
                    "canvas_type": 0,
                    "public_url": null,
                    "public": true,
                    "created_at": "2025-01-15T14:37:22.451Z",
                    "updated_at": "2025-01-15T14:37:22.451Z",
                    "soft_deleted_at": null
                  }
                }
              }
            }
          },
          "201": {
            "description": "Successfully created workflow (if the code returns 201 instead of 200). Same schema as 200.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The newly created workflow's UUID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the newly created workflow."
                    },
                    "owner_id": {
                      "type": "string",
                      "description": "UUID of the workflow owner."
                    },
                    "team_id": {
                      "type": "string",
                      "description": "UUID of the associated team."
                    },
                    "editing_user_id": {
                      "type": "string",
                      "description": "UUID of the user currently editing the workflow."
                    },
                    "is_external": {
                      "type": "boolean",
                      "description": "Whether the workflow is external."
                    },
                    "canvas_type": {
                      "type": "integer",
                      "description": "Type of canvas used for the workflow."
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Whether the workflow is public."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was created."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the workflow was last updated."
                    }
                  },
                  "example": {
                    "id": "c5247e83-95ad-421f-b38c-f3c645a91de7",
                    "name": "Customer Journey Analysis",
                    "owner_id": "7631a8e2-509f-4d17-b5a2-e84bca57f1d6",
                    "team_id": "25974c31-28dd-45f0-93fb-82c7a409e358",
                    "editing_user_id": null,
                    "last_edited": null,
                    "workflow_url": null,
                    "workflow_api_url": null,
                    "is_external": false,
                    "s3_file_id": null,
                    "canvas_type": 0,
                    "public_url": null,
                    "public": true,
                    "created_at": "2025-01-15T14:37:22.451Z",
                    "updated_at": "2025-01-15T14:37:22.451Z",
                    "soft_deleted_at": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possibly invalid JSON or missing fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid JSON or missing fields."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid JSON or missing fields."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Check your JWT or API key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. You don't have permission to create a workflow under the specified team.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. The user does not have the required permission."
                    }
                  },
                  "example": {
                    "description": "Forbidden. The user does not have the required permission."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. Possibly the endpoint is spelled incorrectly or the specified team doesn't exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. Possibly the endpoint is spelled incorrectly or the specified team doesn't exist."
                    }
                  },
                  "example": {
                    "description": "Not Found. Possibly the endpoint is spelled incorrectly or the specified team doesn't exist."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H 'Authorization: Bearer $JWT_TOKEN' \\\n  -H 'x-api-key: $X-API-KEY' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\"name\": \"Customer Journey Analysis\", \"team_id\": \"25974c31-28dd-45f0-93fb-82c7a409e358\", \"is_external\": false, \"canvas_type\": 0, \"public\": true}' \\\n  '$BASE_URL/workflows'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n  'x-api-key': '$X-API-KEY',\n  'Authorization': 'Bearer $JWT_TOKEN',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\ndata = {\n  'name': 'Customer Journey Analysis',\n  'team_id': '25974c31-28dd-45f0-93fb-82c7a409e358',\n  'is_external': False,\n  'canvas_type': 0,\n  'public': True\n}\n\nresp = requests.post('$BASE_URL/workflows', json=data, headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch('$BASE_URL/workflows', {\n  method: 'POST',\n  headers: {\n    'x-api-key': '$X-API-KEY',\n    'Authorization': 'Bearer $JWT_TOKEN',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Customer Journey Analysis',\n    team_id: '25974c31-28dd-45f0-93fb-82c7a409e358',\n    is_external: false,\n    canvas_type: 0,\n    public: true\n  })\n})\n  .then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"$X-API-KEY\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"$JWT_TOKEN\");\n\nvar newWorkflow = new {\n    name = \"Customer Journey Analysis\",\n    team_id = \"25974c31-28dd-45f0-93fb-82c7a409e358\",\n    is_external = false,\n    canvas_type = 0,\n    _public = true\n};\n\nvar content = new StringContent(\n    JsonConvert.SerializeObject(newWorkflow), Encoding.UTF8, \"application/json\");\nvar response = await client.PostAsync(\"$BASE_URL/workflows\", content);\nstring respContent = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(respContent);"
          }
        ]
      }
    },
    "/teams": {
      "get": {
        "tags": ["teams"],
        "summary": "List All Teams",
        "description": "Returns a list of all teams associated with the authenticated user.",
        "operationId": "get_teams",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access our API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response. Returns a JSON array of teams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "description": "Team's unique ID (UUID)." },
                      "name": { "type": "string", "description": "Team's name." }
                    }
                  },
                  "example": [
                    {
                      "id": "41480ee5-14ff-4f9e-89bf-91b0a8e50e77",
                      "name": "My Example Team"
                    },
                    {
                      "id": "a13dbeff-de02-49dd-9593-182105d3f71a",
                      "name": "Another Team"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possibly invalid query or parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid query or parameters."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid query or parameters."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Bearer token or API key is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user does not have permission to view teams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. The user does not have permission to view teams."
                    }
                  },
                  "example": {
                    "description": "Forbidden. The user does not have permission to view teams."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The requested resource could not be found."
                    }
                  },
                  "example": {
                    "description": "Not Found. The requested resource could not be found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'Accept: application/json' \\\n  'https://accounts.playbook3d.com/teams'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.get('https://accounts.playbook3d.com/teams', headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch('https://accounts.playbook3d.com/teams', {\n  method: 'GET',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n})\n  .then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.GetAsync(\"https://accounts.playbook3d.com/teams\");\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      }
    },
    "/teams/{team_id}": {
      "get": {
        "tags": ["teams"],
        "summary": "Get Team by ID",
        "description": "Retrieves a single team record by ID. Requires both JWT (Bearer token) and an x-api-key.",
        "operationId": "get_team_by_id",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "description": "The UUID of the team you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints to access the API programmatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the team record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "description": "Full team object. Fields vary depending on your model."
                    }
                  },
                  "example": {
                    "team": {
                      "id": "41480ee5-14ff-4f9e-89bf-91b0a8e50e77",
                      "name": "Example Team",
                      "owner_id": "01bf560-20c1-703b-99bc-4dc65288811b",
                      "created_at": "2024-11-04T12:34:56Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possibly invalid team_id format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Bad Request. Possibly invalid team_id format."
                    }
                  },
                  "example": {
                    "description": "Bad Request. Possibly invalid team_id format."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Bearer token or API key is invalid or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                    }
                  },
                  "example": {
                    "description": "Unauthorized. The Bearer token or API key is invalid or missing."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Possibly the user doesn't own or have access to that team.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Forbidden. Possibly the user doesn't own or have access to that team."
                    }
                  },
                  "example": {
                    "description": "Forbidden. Possibly the user doesn't own or have access to that team."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. The requested team could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Not Found. The requested team could not be found."
                    }
                  },
                  "example": {
                    "description": "Not Found. The requested team could not be found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Internal Server Error. Something went wrong on the server."
                    }
                  },
                  "example": {
                    "description": "Internal Server Error. Something went wrong on the server."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Authorization: Bearer $API_KEY' \\\n  -H 'Accept: application/json' \\\n  '$BASE_URL/teams/$team_id'"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nheaders = {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n}\nresp = requests.get(f\"https://accounts.playbook3d.com/teams/{team_id}\", headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "fetch(`https://accounts.playbook3d.com/teams/${team_id}`, {\n  method: 'GET',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Accept': 'application/json'\n  }\n}).then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          },
          {
            "lang": "C#",
            "source": "// Using HttpClient\nHttpClient client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"x-api-key\", \"<YOUR_API_KEY>\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", \"<YOUR_JWT_TOKEN>\");\n\nvar response = await client.GetAsync($\"https://accounts.playbook3d.com/teams/{team_id}\");\nstring content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(response.StatusCode);\nConsole.WriteLine(content);"
          }
        ]
      }
    },
    "/run_workflow/{team_id}/{run_id}": {
      "post": {
        "tags": ["run-workflow"],
        "summary": "Run a Specified Workflow",
        "description": "Enqueues or starts a run of the given workflow ID under the specified team and run ID. The `origin` field determines the calling context (e.g. '2' for Unity).",
        "operationId": "run_workflow",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "description": "The team UUID to which this run will be associated.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "A unique run UUID for identifying this workflow execution. Generated automatically if not supplied by user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "Your API key. This is required by most endpoints for programmatic access. You can view your x-api-key in the 'Profile' tab.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (JWT).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The workflow ID and optional origin and inputs for the run.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The workflow's unique UUID."
                  },
                  "origin": {
                    "type": "string",
                    "description": "Indicates the caller context (e.g., '2' for Unity SDK)."
                  },
                  "inputs": {
                    "type": "object",
                    "description": "Any JSON data you want to pass into the workflow."
                  }
                },
                "example": {
                  "id": "b8ba9786-75aa-471d-baf2-7d0446b3f4b4",
                  "origin": "2",
                  "inputs": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow queued successfully. The response body typically includes run status info.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "run_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The unique run ID."
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the newly queued workflow."
                    },
                    "message": {
                      "type": "string",
                      "description": "Optional success/failure message."
                    }
                  },
                  "example": {
                    "run_id": "eb49c4e2-e9c5-4202-aea2-86dd31493621",
                    "status": "queued",
                    "message": "Workflow queued successfully."
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error. The request body or parameters are malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "example": {
                    "detail": [
                      {
                        "loc": ["body", "id"],
                        "msg": "field required",
                        "type": "value_error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The bearer token or API key is invalid."
          },
          "403": {
            "description": "Forbidden. User does not have permission to perform this operation."
          },
          "404": {
            "description": "Not Found. The resource (team, run, or workflow) does not exist."
          },
          "500": {
            "description": "Internal Server Error. Something unexpected happened."
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H 'x-api-key: <YOUR_API_KEY>' \\\n  -H 'Authorization: Bearer <YOUR_JWT_TOKEN>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{ \"id\": \"<WORKFLOW_ID>\", \"origin\": \"2\", \"inputs\": {} }' \\\n  'https://api.playbook3d.com/run_workflow/<TEAM_ID>/<RUN_ID>'"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport uuid\n\nTEAM_ID = \"<TEAM_ID>\"\nWORKFLOW_ID = \"<WORKFLOW_ID>\"\nRUN_ID = str(uuid.uuid4())\n\npayload = {\n    \"id\": WORKFLOW_ID,\n    \"origin\": \"2\",\n    \"inputs\": {}\n}\n\nheaders = {\n    \"x-api-key\": \"<YOUR_API_KEY>\",\n    \"Authorization\": \"Bearer <YOUR_JWT_TOKEN>\",\n    \"Content-Type\": \"application/json\"\n}\n\nurl = f\"https://api.playbook3d.com/run_workflow/{TEAM_ID}/{RUN_ID}\"\nresp = requests.post(url, json=payload, headers=headers)\nprint(resp.status_code, resp.json())"
          },
          {
            "lang": "JavaScript",
            "source": "const TEAM_ID = '<TEAM_ID>';\nconst WORKFLOW_ID = '<WORKFLOW_ID>';\nconst RUN_ID = 'some-uuid';\n\nfetch(`https://api.playbook3d.com/run_workflow/${TEAM_ID}/${RUN_ID}`, {\n  method: 'POST',\n  headers: {\n    'x-api-key': '<YOUR_API_KEY>',\n    'Authorization': 'Bearer <YOUR_JWT_TOKEN>',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    id: WORKFLOW_ID,\n    origin: '2',\n    inputs: {}\n  })\n})\n  .then(res => res.json())\n  .then(data => {\n    console.log('Status:', data.status);\n    console.log('Run ID:', data.run_id);\n  })\n  .catch(err => console.error(err));"
          }
        ]
      }
    },"/users": {
      "get": {
        "tags": ["get-users"],
        "summary": "Gets the current Playbook User",
        "description": "Gets the current Playbook User",
        "operationId": "get-users",
        "parameters": [
          {
            "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key",
              "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website."
            },
            "name": "x-api-key",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema":{
                  "type":"object",
                  "properties": {
                    "id":{
                      "type":"string"
                    },
                    "cognito_id":{
                      "type":"string"
                    },
                    "tier_id":{
                      "type":"string"
                    },
                    "email":{
                      "type":"string"
                    },
                    "status":{
                      "type":"string"
                    },
                    "user_type":{
                      "type":"string"
                    },
                    "name":{
                      "type":"string"
                    },
                    "gpu_usage_total":{
                      "type":"integer"
                    },
                    "gpu_usage_billing_period":{
                      "type":"integer"
                    }
                  },
                  "example":{
                    "id": "uuid",
                    "cognito_id": "uuid",
                    "tier_id": "uuid",
                    "email": "user@domain.com",
                    "status": "Active",
                    "user_type": "normal",
                    "name": "John Doe",
                    "gpu_usage_total": 250,
                    "gpu_usage_billing_period": 250
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from playbookNetworkClient import PlaybookClient\n\n def setup(self):\n self.playbookClient = PlaybookClient()\n self.playbookClient.set_api_key({your api key})\n\n def get_user(self):\n  user = self.playbookClient.get_user_data()"
          },
          {
            "lang": "JavaScript",
            "source": ""
          },
          {
            "lang": "C#",
            "source": ""
          }
        ]
      }
    },
    "/runs": {
      "get": {
        "tags": ["runs"],
        "summary": "Gets all the playbook runs associated with your account",
        "description": "Gets playbook runs.",
        "operationId": "get-runs",
        "parameters": [
          {
            "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Api-Key",
              "description": "Your API key. This is required by most endpoints to access our API programatically. You can view your x-api-key using the 'Profile' tab on the website."
            },
            "name": "x-api-key",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id":{
                      "type": "string"
                    },
                    "platform":{
                      "type": "string"
                    },
                    "status":{
                      "type": "string"
                    },
                    "progress":{
                      "type": "integer"
                    },
                    "duration":{
                      "type": "integer"
                    },
                    "webhook_url":{
                      "type": "string"
                    },
                    "run_result":{
                      "type": "string"
                    },
                    "team":{
                      "type": "object"
                    },
                    "owner":{
                      "type": "object"
                    },
                    "workflow":{
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "example": {
                    "id": "uuid",
                    "platform": "web",
                    "status": "Completed",
                    "progress": 100,
                    "duration": 5,
                    "webhook_url": "url",
                    "run_result": "result url",
                    "team": {"PlaybookTeam": {}},
                    "owner": {"PlaybookUser": {}},
                    "workflow": {"PlaybookWorkflow": {}}
                  }
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from playbookNetworkClient import PlaybookClient\n\n def setup(self):\n self.playbookClient = PlaybookClient()\n self.playbookClient.set_api_key({your api key})\n\n def get_runs(self):\n  teams = self.playbookClient.get_user_runs()"
          },
          {
            "lang": "JavaScript",
            "source": ""
          },
          {
            "lang": "C#",
            "source": ""
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "run_workflow_post": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the workflow to run."
          },
          "origin": {
            "type": "string",
            "description": "2 indicates Unity SDK."
          },
          "inputs": {
            "type": "object",
            "description": "Optional array of inputs to override workflow defaults"
          }
        },
        "type": "object",
        "required": ["id", "origin"],
        "title": "run_workflow__voice_id__post"
      },
      "upload_image_post": {
        "properties": {
          "file_path": {
            "type": "string",
            "description": "The file path to upload."
          },
          "file":{
            "type": "object",
            "description": "File binary to upload"
          }
        },
        "type": "object",
        "required": [],
        "title": "upload_image"
      }
    }
  },
  "tags": []
}